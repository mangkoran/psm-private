% sebisa mungkin buat citation key yang mudah diingat dan dibaca untuk memudahkan
% sitasi dan referencing, misalnya untuk kedua contoh di bawah memiliki format berikut:
% <1st-author-lastname>:<year>:<keyword-from-title>

@book{knuth:2001:art,
  title = {The Art of Computer Programming: Fundamental Algorithms},
  author = {Knuth, D.E.},
  number = {v. 1},
  isbn = {9780201896831},
  year = {2001},
  publisher = {Addison-Wesley},
}
@inproceedings{vogels:2006:web,
  author = {W. Vogels},
  booktitle = {2006 IEEE International Conference on Services Computing (SCC'06)
               },
  title = {Web Services at Amazon.com},
  year = {2006},
  pages = {22--24},
  keywords = {Distributed computing;Technological innovation;Web services},
  doi = {10.1109/SCC.2006.116},
  month = {Sept},
}
@book{Gao_Tsao_Wu_2003,
  title = {Testing and quality assurance for component-based software},
  publisher = {Artech House},
  author = {Gao, Jerry and Tsao, H.-S J. and Wu, Ye},
  year = {2003},
} 
@article{7036275,
  author = {Bernstein, David},
  journal = {IEEE Cloud Computing},
  title = {Containers and Cloud: From LXC to Docker to Kubernetes},
  year = {2014},
  volume = {1},
  number = {3},
  pages = {81-84},
  doi = {10.1109/MCC.2014.51},
}
@article{10.1145/2890778,
  author = {Jacobson, Ivar and Spence, Ian and Kerr, Brian},
  title = {Use-Case 2.0},
  year = {2016},
  issue_date = {May 2016},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {59},
  number = {5},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/2890778},
  doi = {10.1145/2890778},
  abstract = {The hub of software development.},
  journal = {Commun. ACM},
  month = {apr},
  pages = {61–69},
  numpages = {9},
}
@inproceedings{Muthukumar2020FirewallSA,
  title = {Firewall Scheduling and Routing Using pfSense},
  author = {M. G. Muthukumar and P. Senthilkumar and M. Jawahar},
  year = {2020},
}
@inproceedings{Oliveira2011LiteratureRO,
  title = {Literature Review of Information Technology Adoption Models at Firm
           Level},
  author = {Tiago Oliveira and Maria F. O. Martins},
  year = {2011},
}
@inproceedings{Oliveira2011LiteratureRO,
  title = {Literature Review of Information Technology Adoption Models at Firm
           Level},
  author = {Tiago Oliveira and Maria F. O. Martins},
  year = {2011},
}
@book{Stallings_Brown_2014,
  place = {London},
  title = {Computer security: Principles and practice},
  publisher = {Pearson},
  author = {Stallings, William and Brown, Lawrie},
  year = {2014},
} 
@inproceedings{10.1109/APSEC.2004.55,
  author = {Linzhang, Wang and Jiesong, Yuan and Xiaofeng, Yu and Jun, Hu and
            Xuandong, Li and Guoliang, Zheng},
  title = {Generating Test Cases from UML Activity Diagram Based on Gray-Box
           Method},
  year = {2004},
  isbn = {0769522459},
  publisher = {IEEE Computer Society},
  address = {USA},
  url = {https://doi.org/10.1109/APSEC.2004.55},
  doi = {10.1109/APSEC.2004.55},
  abstract = {Test case generation is the most important part of the testing
              efforts, the automation of specification based test case generation
              needs formal or semi-formal specifications. As a semi-formal
              modelling language, UML is widely used to describe analysis and
              design specifications by both academia and industry, thus UML
              models become the sources of test generation naturally. Test cases
              are usually generated from the requirement or the code while the
              design is seldom concerned, this paper proposes an approach to
              generate test cases directly from UML activity diagram using
              gray-box method, where the design is reused to avoid the cost of
              test model creation. In this approach, test scenarios are directly
              derived from the activity diagram modelling an operation. Then all
              the information for test case generation, i.e. input/output
              sequence and parameters, the constraint conditions and expected
              object method sequence, is extracted from each test scenario. At
              last, the possible values of all the input/output parameters could
              be generated by applying category-partition method, and test suite
              could be systematically generated to find the inconsistency between
              the implementation and the design. A prototype tool named UMLTGF
              has been developed to support the above process.},
  booktitle = {Proceedings of the 11th Asia-Pacific Software Engineering
               Conference},
  pages = {284–291},
  numpages = {8},
  keywords = {test case, test scenario, gray-box method, UML activity diagram},
  series = {APSEC '04},
}
@article{Paulsen_Byers_2019,
  DOI = {10.6028/nist.ir.7298r3},
  journal = {Glossary of key information security terms},
  author = {Paulsen, Celia and Byers, Robert},
  year = {2019},
} 
@misc{rfc4949,
  series = {Request for Comments},
  number = 4949,
  howpublished = {RFC 4949},
  publisher = {RFC Editor},
  doi = {10.17487/RFC4949},
  url = {https://www.rfc-editor.org/info/rfc4949},
  author = {Robert W. Shirey},
  title = {{Internet Security Glossary, Version 2}},
  pagetotal = 365,
  year = 2007,
  month = aug,
  abstract = {This Glossary provides definitions, abbreviations, and
              explanations of terminology for information system security. The
              334 pages of entries offer recommendations to improve the
              comprehensibility of written material that is generated in the
              Internet Standards Process (RFC 2026). The recommendations follow
              the principles that such writing should (a) use the same term or
              definition whenever the same concept is mentioned; (b) use terms in
              their plainest, dictionary sense; (c) use terms that are already
              well-established in open publications; and (d) avoid terms that
              either favor a particular vendor or favor a particular technology
              or mechanism over other, competing techniques that already exist or
              could be developed. This memo provides information for the Internet
              community.},
}
@inproceedings{Balaji_2012,
  title = {WATEERFALL Vs V-MODEL Vs AGILE: A COMPARATIVE STUDY ON SDLC},
  author = {S. Balaji and M. Sundararajan Murugaiyan},
  year = {2012},
}
@inproceedings{Shen2003FormalizationTA,
  title = {Formalization, Testing and Execution of a Use Case Diagram},
  author = {Wuwei Shen and Shaoying Liu},
  booktitle = {IEEE International Conference on Formal Engineering Methods},
  year = {2003},
}
